https://practice.geeksforgeeks.org/problems/count-all-possible-paths-from-top-left-to-bottom-right3011/1

//{ Driver Code Starts
//Initial Template for Java
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] input = new String[2]; 
            input = br.readLine().split(" "); 
            int m = Integer.parseInt(input[0]); 
            int n = Integer.parseInt(input[1]); 
            Solution ob = new Solution();
            System.out.println(ob.numberOfPaths(m,n));
        }
    }
}

// } Driver Code Ends


//User function Template for Java
class Solution
{
    public static long c=0;
    public static long sol(int m , int n, long[][] dp){
        if(m==0 && n==0){
            return 1;
        }
        if(m<0 || n<0){
            return 0;
        }
        if(dp[m][n]!=-1){
            return dp[m][n];
        }
       return dp[m][n] = (sol(m,n-1,dp) + sol(m-1,n,dp))%1000000007;
    }
    long numberOfPaths(int m, int n)
    {
        // code here
       //c=0;
       long[][] dp = new long[m][n];
       for(int i=0; i<m; i++){
           for(int j=0; j<n; j++){
               dp[i][j]=-1;
           }
       }
      
       return sol(m-1,n-1,dp);
        
    }
}
